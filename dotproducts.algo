FUNCTION read_n (n) : INTEGER
VAR
    n : INTEGER;
BEGIN
REPEAT
    read (n);
UNTIL (m>0)
    RETURN n ;
END

FUNCTION read_m (m) : INTEGER
VAR
    m : INTEGER;
BEGIN
REPEAT
    read (m);
UNTIL (m>0 and (m%2)=0)
    
    RETURN m ;
END

PROCEDURE read_matrice (n,m :INTEGER, VAR mat: ARRAY_OF FLOAT)
VAR
    i,j : INTEGER
BEGIN
    FOR i FROM 0 TO n-1 DO
    FOR j FROM 0 TO m-1 DO
        read (mat([i][j]))
    END_FOR
    END_FOR
END

PROCEDURE dot_product(VAR ps: INTEGER, v1,v2:ARRAY_OF FLOAT)
VAR
    i : INTEGER;
BEGIN
    
    FOR i FROM 0 TO v1.length-1 DO
       ps += v1[i] * v2[i]
    END_FOR
    END_FOR
    return(ps);
END


FUNCTION dot_products(v1,v2:ARRAY_OF FLOAT) : FLOAT
VAR
    ps, i : INTEGER;
BEGIN
    FOR i FROM 0 TO v1.length-1 DO
       ps += v1[i] * v2[i]
    END_FOR
    RETURN ps ;
END


Algorithm DotProduct
VAR
ps, i, j, n, m: INTEGER;
mat : ARRAY_OF FLOAT [][];
BEGIN
n:= read_n ();
m:= read_m ();
read_matrice(n,m,mat);
//procedure
FOR j FROM 0 TO m-1 STEP 2 DO
    dot_product(ps,m,mat[i],mat[i+1]);
    IF (ps=0) THEN
        Write ("these two vectors are orthogonal");
        ELSE
        Write ("these two vectors are not orthogonal")
    END_IF
END_FOR
//function
FOR j FROM 0 TO m-1 STEP 2 DO
ps:= dot_products(m,mat[i],mat[i+1]);
IF (ps=0) THEN
    Write ("these two vectors are orthogonal");
    ELSE
    Write ("these two vectors are not orthogonal")
END_IF
END_FOR

END